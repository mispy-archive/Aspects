#character
on_yearly_pulse = {
	events = {
	}

	random_events = {
	}
}


#character
on_bi_yearly_pulse = {
  events =  {
  }

	random_events = {
	}
}

#character
on_five_year_pulse = {
	random_events = {
	}
}

#character
on_decade_pulse = {

}

# For characters 2 to 16 years old
on_yearly_childhood_pulse = {
	random_events = {
	}
}

#on combat pulse
on_combat_pulse = {
	random_events = {
	}
}

#on siege pulse
on_siege_pulse = {
	random_events = {
	}
}

# any leader in battle on winning side is ROOT - opponent army leader is FROM
on_battle_won = {
	random_events = {
	}
}

# any leader in battle on winning side is ROOT - opponent army leader is FROM
on_major_battle_won = {
	events = {
	}
}

# Winning army leader is ROOT - opponent army leader is FROM
on_battle_won_leader = {
}

# Winning army leader is ROOT - opponent army leader is FROM
on_major_battle_won_leader = {
	events = {
	}
}

# Any leader in battle on losing side is ROOT - opponent army leader is FROM
on_battle_lost = {
	random_events = {
	}
}

# Any leader in battle on losing side is ROOT - opponent army leader is FROM
on_major_battle_lost = {
	events = {
	}
}

# Losing army leader ROOT - opponent army leader is FROM
on_battle_lost_leader = {
}

# Losing army leader ROOT - opponent army leader is FROM
on_major_battle_lost_leader = {
	events = {
	}
}

# The taken Holding title is in FROM.
on_siege_won_leader = {
	events = {
	}
	random_events = {
	}
}

on_siege_lost_leader = {
	events = {
	}
}

# Fires for the owner of the winning unit (ROOT). The taken Holding title is in FROM.
on_siege_over_winner = {
	events = {
	}
	random_events = {
	}
}

# Fires for all characters presumed to be in the Holding at the time. Siege winner unit owner in the 'new_character' scope, lost holding title in FROM, local character in ROOT.
on_siege_over_loc_chars = {
	events = {
	}
	random_events = {
 	}
}

#character
on_failed_assassination = {
	random_events = {
 	}
}

#character
on_failed_assassination_disc = {
	random_events = {
 	}
}

#character
on_assassination = {
	events = {
 	}
}

#character
on_assassination_disc = {
	events = {
 	}
}

# character
on_birth = {
	events = {
	}
	random_events = {
	}
}

# character
on_adulthood = {
	events = {
	}
}

# baby scope
on_post_birth = {
	events = {
	}
}

#character (at 2 months)
on_pregnancy = {
	events = {
 	}
}

#character
on_crusade_creation = {
	events = {
 	}
}

# Sent to employers of both spouses - ROOT is employer. FROM is employers "employee". new_character is the other spouse.
on_marriage = {
	events = {
 	}
}

#character. Triggers if someone tries to imprison someone landed and fails. This leads to an automatic war declaration(independece)
on_avoided_imprison_started_war = {
	events = {
 	}
}

#character. Triggers if someone becomes imprisoned by the diplo-action - ROOT is prisoner, FROM is imprisoner
on_became_imprisoned = {
	events = {
 	}
}

#character. Triggers if someone tries to imprison someone unlanded and fails. Character is exiled to another country
on_avoided_imprison_fled_country = {
	events = {
 	}
}

#character. Triggers if someone is released from prison - ROOT is prisoner, FROM is imprisoner
on_released_from_prison = {
	events = {
 	}
}

#character. Triggers if someone is executed
on_executed = {
	events = {
    aspects.1
 	}
}

#character. Triggers if someone is exiled
on_exiled = {
	events = {
 	}
}

#character. Fires every month for characters who are preparing an invasion.
on_prepared_invasion_monthly = {
	random_events = {
	}
}

#character. Fires if a prepared invasion becomes invalid.
on_prepared_invasion_aborts = {
	events = {
	}
}

#character. Fires if a prepared invasion expires.
on_prepared_invasion_expires = {
	events = {
	}
}

on_death = {
	events = {
	}
	random_events = {
	}
}

on_merc_rampage = {
	events = {
 	}
}

on_merc_leave = {
	events = {
 	}
}

on_merc_turn_coat_from = {
	events = {
 	}
}

on_merc_turn_coat_to = {
	events = {
 	}
}

on_holy_order_leave = {
	events = {
 	}
}

#Note: Unsynchronised, this message should not execute an event which changes the gamestate to prevent out of sync
on_letter_event_message = {
	events = {
	}
}

#Note: Unsynchronised, this message should not execute an event which changes the gamestate to prevent out of sync
on_character_event_message = {
	events = {
	}
}

on_loot_settlement = {
	random_events = {
	}
}

###########################
# DIPLOMATIC NOTIFICATIONS
###########################

DEMAND_RELIGIOUS_CONVERSION_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

DEMAND_RELIGIOUS_CONVERSION_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

REVOKE_TITLE_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

REVOKE_TITLE_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

# FROM is character receiving peace proposal. ROOT is character sending peace proposal.
OFFER_PEACE_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

OFFER_PEACE_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

SEND_GIFT_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

SEND_GIFT_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ASK_FOR_MONEY_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_FOR_MONEY_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ASK_FOR_CLAIM_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_FOR_CLAIM_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

NOMINATE_BISHOP_TO_POPE_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

NOMINATE_BISHOP_TO_POPE_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}


OFFER_VASSALIZATION_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

OFFER_VASSALIZATION_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ARRANGE_BETROTHAL_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ARRANGE_BETROTHAL_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ARRANGE_SUCC_BETROTHAL_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ARRANGE_SUCC_BETROTHAL_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

OFFER_SUCCESSION_MARRIGE_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

OFFER_SUCCESSION_MARRIGE_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

OFFER_MARRIGE_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

OFFER_MARRIGE_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

RANSOM_CHARACTER_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

RANSOM_CHARACTER_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

EDUCATE_CHARACTER_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

EDUCATE_CHARACTER_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ABANDON_AMBITION_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ABANDON_AMBITION_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

STOP_BACKING_AMBITION_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

STOP_BACKING_AMBITION_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

JOIN_AMBITION_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

JOIN_AMBITION_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

GRANT_LANDED_TITLE_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

GRANT_LANDED_TITLE_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

APPOINT_TO_OFFICE_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

APPOINT_TO_OFFICE_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ASK_FOR_INVASION_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_FOR_INVASION_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

#
ASK_FOR_DIVORCE_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_FOR_DIVORCE_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ASK_FOR_EXCOMMUNICATION_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_FOR_EXCOMMUNICATION_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

CALL_ALLY_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

CALL_ALLY_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

DECLARE_WAR_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

RETRACT_VASSAL_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

RETRACT_VASSAL_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

INVITE_TO_COURT_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

INVITE_TO_COURT_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ASK_FOR_VASSALIZATION_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_FOR_VASSALIZATION_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ASK_TO_LIFT_EXCOMMUNICATION_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_TO_LIFT_EXCOMMUNICATION_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ASK_TO_RANSOM_CHARACTER_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_TO_RANSOM_CHARACTER_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ASK_TO_JOIN_WAR_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_TO_JOIN_WAR_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

ASK_TO_EMBARGO_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

ASK_TO_EMBARGO_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

MAKE_CONSORT_INTERACTION_ACCEPT_EVENT = {
	events = {
	}
}

MAKE_CONSORT_INTERACTION_DECLINE_EVENT = {
	events = {
	}
}

# never triggered, but reserved for CB use
on_warleader_death = {
	events = {
	}
}

# Respond to a proposed change of law
on_approve_law = {
	events = {
	}
}

# Respond to a proposed change of de jure law
on_approve_de_jure_law = {
	events = {
	}
}

# When rebels appear
on_rebel_revolt = {
	events = {
	}
}

# When province defects to rebels
on_defect_to_rebels = {
	events = {
	}
}

# When rebels disperse
on_defect_from_rebels = {
	events = {
	}
}

# When a mission succeeds
on_crusade_success = {
	events = {
	}
}

# When a mission fails
on_crusade_failure = {
	events = {
	}
}

# When a pagan ruler forces a prisoner to be his consort
on_forced_consort = {
	events = {
	}
}

# When a pagan religion is reformed
on_reform_religion = {
	events = {
	}
}

# When the religion changes in a county
on_county_religion_change = {
	events = {
	}
}

# When a character accepts religious conversion (the diplomatic action)
# FROMFROM is the demander. FROM is the vassal. ROOT is the character. Fires for the vassal and each of his courtiers and vassals.
on_vassal_accepts_religious_conversion = {
	events = {
	}
}

# A heresy has become the new norm, replacing the old orthodoxy
on_heresy_takeover = {
	events = {
	}
}

# Fires for a newly elected Doge. FROM is the previous (dying or abdicating) doge.
on_become_doge = {
	events = {
	}
}

on_elective_gavelkind_succession = {
	events = {
	}
}

# Fires when a navy moves into a port. Starts in unit scope, FROM is the owner.
on_entering_port = {
	events = {
	}
}

# Fires when a cardinal is elected. SoA only! FROM is the Religious head.
on_rel_elector_chosen = {
}

# Fires when a Pope is elected. SoA only! FROM is the previous Religious Head
on_rel_head_chosen = {
	events = {
	}
}

# ROOT is the looter, FROM is the settlement title
on_settlement_looted = {
}

# ROOT is the navy's owner, FROM is the province
on_navy_returns_with_loot = {
}

# ROOT is the creating character, FROM is the title
on_create_title = {
	events = {
	}
}

# ROOT is the character, FROM is the title, FROMFROM is the old holder
on_new_holder = {
}

# ROOT is the character, FROM is the title, FROMFROM is the old holder
on_new_holder_inheritance = {
	events = {
	}
}

# ROOT is the character, FROM is the title, FROMFROM is the old holder
on_new_holder_usurpation = {
	events = {
	}
}

# Fires at the end of each year if the chronicle is empty
on_create_chronicle_if_empty = {
	random_events = {
	}
}

# Fires when the player changes character
# FROM is the old character, ROOT is the new holder
on_chronicle_owner_change = {
	events = {
		CM.10001
	}
}

# Fires when the game starts (not from saves)
on_chronicle_start = {
	events = {
	}
}

# Character converts religion, for whatever reason. ROOT is the character after conversion and the FROM scope has the old religion.
on_character_convert_religion = {
	events = {
	}
}

# Character converts culture, for whatever reason. ROOT is the character after conversion and the FROM scope has the old culture.
on_character_convert_culture = {
	events = {
	}
}

on_acquire_nickname = {
	events = {
	}
}

# Fires for vassals that can become independent as a result of liege being over vassal limit
on_over_vassal_limit_succession = {
	events = {
	}
}

# From = Attacker, Root = Defender
on_war_started = {
	events = {
	}
}

# From = Attacker, Root = Defender
on_war_ended_victory = {
	events = {
	}
}

# From = Attacker, Root = Defender
on_war_ended_whitepeace = {
	events = {
	}
}

# From = Attacker, Root = Defender
on_war_ended_defeat = {
	events = {
	}
}

